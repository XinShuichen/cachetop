#!/usr/bin/env python3

"""
Copyright (c) 2024 Xin Shuichen <zhangyuchen.prog@foxmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Distributed according to the BSD-2-Clause
"""


epilog = """
Examples:
  Search all files under the root directory and print the top 5 files occupying the most cache:
    cachetop -n 5

  Search all files under the /test directory and print the top 5 files occupying the most cache:
    cachetop /test -n 5

  Search all files under the root directory, print the top 10 files, and include nfs, bcachefs, and tmpfs file systems:
    cachetop -n 5 --include_fs "nfs,bcachefs,tmpfs"

  Search files under the root directory, excluding files in the /root and /home directories:
    cachetop --exclude_dir "/root|/home"

Advantages:
  - Low memory usage, not exceeding 20M RSS on the author's machine. Memory usage does not grow with the num of files to be scanned.
  - Displays page cache even if it is not associated with a process.
  - Excludes all virtual file systems, currently only reads ext4 and tmpfs file systems.
"""

import os
import ctypes
import mmap
import heapq
import argparse

PAGE_SIZE = os.sysconf("SC_PAGESIZE")
libc = ctypes.CDLL("libc.so.6")
vec_length = 10 * 1024 * 1024 * 1024
vec = (
    # 10 GB / 4096 = 2560 KB
    ctypes.c_char
    * (vec_length // PAGE_SIZE)
)()


class MountInfo:
    def __init__(self, search_type, exclude_dir=[]):
        self.search_type = search_type
        self.exclude_dir = exclude_dir
        self.search_dir = []
        self.update_mount_info()

    def update_mount_info(self):
        with open("/proc/mounts", "r") as f:
            mount_info = f.readlines()

        for line in mount_info:
            mount_info = line.split()
            path, type = mount_info[1], mount_info[2]
            if type in self.search_type:
                self.search_dir.append(path)
            else:
                self.exclude_dir.append(path)


class SortedQueue:
    def __init__(self, max_size):
        self.heap = []
        self.max_size = max_size

    def push(self, item_pair):
        heapq.heappush(self.heap, list(item_pair))
        if len(self.heap) > self.max_size:
            self.pop()

    def pop(self):
        if self.heap:
            return tuple(heapq.heappop(self.heap))
        else:
            raise IndexError("pop from an empty queue")

    def peek(self):
        if self.heap:
            return tuple(self.heap[0])
        else:
            return None

    def walk_all_elements(self):
        for item in self.heap:
            yield item


def bytes_to_readable(size, decimal_places=2):
    suffixes = ["B", "KB", "MB", "GB", "TB", "PB"]
    index = 0

    while size >= 1024 and index < len(suffixes) - 1:
        size /= 1024.0
        index += 1

    return "{0:.{1}f} {2}".format(size, decimal_places, suffixes[index])


def walk_files(dir="/", exclude_dir=[]):
    exclude_dir = [os.path.abspath(d) for d in exclude_dir]

    for root, dirs, files in os.walk(dir):
        dirs[:] = [
            d for d in dirs if os.path.abspath(os.path.join(root, d)) not in exclude_dir
        ]

        for filename in files:
            file_path = os.path.join(root, filename)
            if not os.path.islink(file_path):
                yield file_path


def get_cached_pages_size(fd, file_size):
    cached_pages = 0
    mmap_addr = mmap.mmap(fd, file_size, mmap.MAP_PRIVATE | mmap.ACCESS_READ)

    res = ctypes.c_uint8.from_buffer(mmap_addr)
    addr = ctypes.byref(res)
    addr_ptr_val = ctypes.cast(addr, ctypes.c_void_p).value

    remaining_size = file_size
    while remaining_size > 0:
        segment_size = min(remaining_size, vec_length)
        result = libc.mincore(
            ctypes.c_void_p(addr_ptr_val),
            ctypes.c_size_t(segment_size),
            ctypes.byref(vec),
        )
        if result == -1:
            errno = ctypes.get_errno()
            raise OSError(errno, "mincore failed with error code {0}".format(errno))

        cached_pages += sum(
            bytearray(
                vec[: segment_size // PAGE_SIZE + (segment_size % PAGE_SIZE != 0)]
            )
        )
        remaining_size -= segment_size
        addr_ptr_val += segment_size

    del res, addr

    mmap_addr.close()

    return cached_pages * PAGE_SIZE


def main(mount_info, queue, search_path):
    queue.push([0, ""])
    count, mincore_count = 0, 0
    for file in walk_files(search_path, mount_info.exclude_dir):
        count += 1
        try:
            fd = os.open(file, os.O_RDWR | os.O_EXCL)
        except:
            continue

        file_size = os.fstat(fd).st_size
        if file_size == 0 or file_size < queue.peek()[0]:
            os.close(fd)
            continue

        try:
            mincore_count += 1
            cached_size = get_cached_pages_size(fd, file_size)
            queue.push((cached_size, file))
        except Exception as e:
            print(
                "Error: {0} {1} file_size: {2} file_path: {3}".format(
                    e, type(queue.peek()[0]), file_size, file
                )
            )
        finally:
            os.close(fd)

    max_len = 0
    res = []
    for item in queue.walk_all_elements():
        max_len = max(max_len, len(item[1]))
        res.append(item)

    res.sort(key=lambda x: x[0], reverse=True)

    print("Process {0} files. Mincore {1} files.".format(count, mincore_count))

    print("|{0}---{1}---{1}|".format("-" * max_len, "-" * 20))
    print(
        "|{:<{}} | {:<20} | {:<20}|".format(
            "FILE NAME", max_len, "CACHE SIZE", "FILE SIZE"
        )
    )
    print("|{0}---{1}---{1}|".format("-" * max_len, "-" * 20))
    for item in res:
        print(
            "|{:<{}} | {:<20} | {:<20}|".format(
                item[1],
                max_len,
                bytes_to_readable(item[0]),
                bytes_to_readable(os.path.getsize(item[1])),
            )
        )
    print("|{0}---{1}---{1}|".format("-" * max_len, "-" * 20))


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Display the top N files occupying the most cache in the specified path (default is root directory '/').",
        epilog=epilog,
        formatter_class=argparse.RawTextHelpFormatter,
    )

    parser.add_argument(
        "search_path",
        nargs="?",
        default="/",
        help="The directory path to search for files (default: '/')",
    )
    parser.add_argument(
        "--topn",
        "-n",
        type=int,
        default=10,
        help="Print the top N files occupying the most cache (default: 10)",
    )
    parser.add_argument(
        "--include_fs",
        "-f",
        type=str,
        default="ext4,tmpfs",
        help="Comma-separated list of file systems to include (default: 'ext4,tmpfs')",
    )
    parser.add_argument(
        "--exclude_dir",
        "-e",
        type=str,
        help="Pipe-separated list of directories to exclude (e.g., '/test|/test1')",
    )

    args = parser.parse_args()

    include_fs = args.include_fs.split(",")
    exclude_dir = args.exclude_dir.split("|") if args.exclude_dir else []
    mount_info = MountInfo(include_fs, exclude_dir)

    topn = args.topn
    queue = SortedQueue(topn)

    search_path = args.search_path
    main(mount_info, queue, search_path)
